<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LongPath</name>
    </assembly>
    <members>
        <member name="T:LongPath.Converter">
            <summary>
            Contains helper data conversion methods.
            </summary>
        </member>
        <member name="M:LongPath.Converter.DoubleIntToLong(System.Int32,System.Int32)">
            <summary>
            Converts two <see cref="T:System.Int32"/> to a single <see cref="T:System.Int64"/>.
            </summary>
            <param name="high">High part.</param>
            <param name="low">Low part.</param>
            <returns>Value converted.</returns>
        </member>
        <member name="M:LongPath.Converter.FileTimeToDateTime(System.Runtime.InteropServices.ComTypes.FILETIME)">
            <summary>
            Converts the <see cref="T:System.Runtime.InteropServices.ComTypes.FILETIME"/> structure to the <see cref="T:System.DateTime"/>.
            </summary>
            <param name="fileTime">The <see cref="T:System.Runtime.InteropServices.ComTypes.FILETIME"/> structure.</param>
            <returns><see cref="T:System.DateTime"/> structure converted.</returns>
        </member>
        <member name="T:LongPath.LongPathCommon">
            <summary>
            Contains common functions to work with files and directories using long paths.
            </summary>
            <remarks>
            This class contains methods taken from the <c>http://bcl.codeplex.com/</c> <c>LongPath</c> project.
            They were modified to support UNC paths.
            </remarks>
        </member>
        <member name="F:LongPath.LongPathCommon.LongPathPrefix">
            <summary>
            Prefix for the long paths.
            </summary>
        </member>
        <member name="F:LongPath.LongPathCommon.LongPathUncPrefix">
            <summary>
            Prefix for the long UNC paths.
            </summary>
        </member>
        <member name="M:LongPath.LongPathCommon.NormalizePath(System.String)">
            <summary>
            Normalizes path (can be longer than <c>MAX_PATH</c>) and adds <c>\\?\</c> long path prefix, if needed.
            UNC paths are also supported.
            </summary>
            <param name="path">Path to be normalized.</param>
            <returns>Normalized path.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:LongPath.LongPathCommon.AddLongPathPrefix(System.String)">
            <summary>
            Adds the <c>\\?\</c> prefix to the <paramref name="path"/> given.
            UNC paths are also supported.
            </summary>
            <param name="path">Path to add prefix to.</param>
            <returns>Path with the long prefix added.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:LongPath.LongPathCommon.RemoveLongPathPrefix(System.String)">
            <summary>
            Removes the long path prefix from the <paramref name="normalizedPath"/> given.
            </summary>
            <param name="normalizedPath">Normalized path.</param>
            <returns>Path without the long path prefix.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="normalizedPath"/> is <see langword="null"/> or empty.</exception>
        </member>
        <member name="M:LongPath.LongPathCommon.GetDirectoryName(System.String)">
            <summary>
            Returns the directory information for the specified path string.
            </summary>
            <param name="path">The path of a file or directory.</param>
            <returns>Directory information for path, or <see langword="null"/>, if path denotes a root directory or is <see langword="null"/>.</returns>
        </member>
        <member name="M:LongPath.LongPathCommon.Exists(System.String)">
            <summary>
            Determines whether the specified <paramref name="path"/> exists.
            </summary>
            <param name="path">The path.</param>
            <returns><see langword="true"/>, if the <paramref name="path"/> given exists; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/> or empty.</exception>
        </member>
        <member name="M:LongPath.LongPathCommon.Exists(System.String,System.Boolean@)">
            <summary>
            Determines whether the specified <paramref name="path"/> exists.
            </summary>
            <param name="path">The path.</param>
            <param name="isDirectory">If set to <see langword="true"/>, the <paramref name="path"/> is a directory; otherwise it's a file.</param>
            <returns><see langword="true"/>, if the <paramref name="path"/> given exists; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:LongPath.LongPathCommon.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the attributes for a file or directory.
            </summary>
            <param name="path">The name of the file whose attributes are to be set.</param>
            <param name="attributes">The file attributes to set for the file.</param>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
                <para>-or-</para>
            <paramref name="path"/> is prefixed with, or contains only a colon character (<c>:</c>).
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> contains a colon character (<c>:</c>) that is not part of a drive label (<c>"C:\"</c>).</exception>
        </member>
        <member name="M:LongPath.LongPathCommon.SetTimestamps(System.String,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Updates the <paramref name="path"/> timestamps with the values given.
            </summary>
            <param name="path">Symbolic link to be updated.</param>
            <param name="creationTime">Creation time.</param>
            <param name="lastAccessTime">Last access time.</param>
            <param name="lastWriteTime">Last write time.</param>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
                <para>-or-</para>
            <paramref name="path"/> is prefixed with, or contains only a colon character (<c>:</c>).
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> contains a colon character (<c>:</c>) that is not part of a drive label (<c>"C:\"</c>).</exception>
            <remarks>
            The major difference between this method and the <see cref="M:System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)"/> is that this method supports
            setting attributes for symbolic links (both files and directories), while the <see cref="M:System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)"/>
            will set them for a target file, not the link itself.
            </remarks>
        </member>
        <member name="M:LongPath.LongPathCommon.IsDirectory(LongPath.Native.Win32FindData)">
            <summary>
            Determines whether the specified attributes belong to a directory.
            </summary>
            <param name="findData">File or directory data object.</param>
            <returns><see langword="true"/> if the specified attributes belong to a directory; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:LongPath.LongPathCommon.IsDirectory(LongPath.Native.EFileAttributes)">
            <summary>
            Determines whether the specified attributes belong to a directory.
            </summary>
            <param name="attributes">File or directory attributes.</param>
            <returns><see langword="true"/> if the specified attributes belong to a directory; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:LongPath.LongPathCommon.GetExceptionForHr(System.Int32,System.String)">
            <summary>
            Converts the specified <paramref name="hr"/> to a corresponding the managed exception type.
            </summary>
            <param name="hr">Error code.</param>
            <param name="path">Path to a file or directory.</param>
            <returns>Managed exception for the <paramref name="hr"/> given.</returns>
        </member>
        <member name="M:LongPath.LongPathCommon.TryNormalizeLongPath(System.String,System.String@)">
            <summary>
            Tries to normalize the <paramref name="path"/> to a long path.
            </summary>
            <param name="path">Path to be normalized.</param>
            <param name="result">Normalized path.</param>
            <returns><see langword="true"/>, if the <paramref name="path"/> was successfully normalized; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:LongPath.LongPathCommon.TryGetFileAttributes(System.String,LongPath.Native.EFileAttributes@)">
            <summary>
            Tries to get the file attributes.
            </summary>
            <param name="normalizedPath">Normalized path to file or directory.</param>
            <param name="attributes">Attributes found.</param>
            <returns><see langword="true"/>, if the file or directory attributes were successfully retrieved; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:LongPath.LongPathDirectory">
            <summary>
            Provides methods for creating, deleting, moving and enumerating directories and
            subdirectories with long paths (paths that exceed 259 characters).
            </summary>
            <remarks>
            This class contains methods taken from the <c>http://bcl.codeplex.com/</c> <c>LongPath</c> project.
            They were modified to support UNC paths.
            </remarks>
        </member>
        <member name="M:LongPath.LongPathDirectory.CreateDirectory(System.String)">
            <summary>
            Creates all directories and subdirectories in the specified path.
            </summary>
            <param name="path">The directory path to create.</param>
            <returns>An object that represents the directory for the specified path.</returns>
            <exception cref="T:System.IO.IOException">
            The directory specified by <paramref name="path"/> is a file.
                <para>-or-</para>
            The network name is not known.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
                <para>-or-</para>
            <paramref name="path"/> is prefixed with, or contains only a colon character (<c>:</c>).
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> contains a colon character (<c>:</c>) that is not part of a drive label (<c>"C:\"</c>).</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.Delete(System.String)">
            <summary>
            Deletes an empty directory from a specified path.
            </summary>
            <param name="path">The name of the empty directory to remove. This directory must be writable or empty.</param>
            <exception cref="T:System.IO.IOException">
            A file with the same name and location specified by <paramref name="path"/> exists.
                <para>-or-</para>
            The directory is the application's current working directory.
                <para>-or-</para>
            The directory specified by <paramref name="path"/> is not empty.
                <para>-or-</para>
            The directory is read-only or contains a read-only file.
                <para>-or-</para>
            The directory is being used by another process.
                <para>-or-</para>
            There is an open handle on the directory, and the operating system is Windows XP or earlier.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            <paramref name="path"/> does not exist or could not be found.
                <para>-or-</para>
            <paramref name="path"/> refers to a file instead of a directory.
                <para>-or-</para>
            The specified path is invalid (for example, it is on an unmapped drive).
            </exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.Delete(System.String,System.Boolean)">
            <summary>
            Deletes the specified directory and, if indicated, any subdirectories and files in the directory.
            </summary>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive"><see langword="true"/> to remove directories, subdirectories, and files in path; otherwise, <see langword="false"/>.</param>
            <exception cref="T:System.IO.IOException">
            A file with the same name and location specified by <paramref name="path"/> exists.
                <para>-or-</para>
            The directory specified by <paramref name="path"/> is read-only, or <paramref name="recursive"/> is <see langword="false"/> and <paramref name="path"/> is not an empty directory.
                <para>-or-</para>
            The directory is the application's current working directory.
                <para>-or-</para>
            The directory contains a read-only file.
                <para>-or-</para>
            The directory is being used by another process.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            <paramref name="path"/> does not exist or could not be found.
                <para>-or-</para>
            <paramref name="path"/> refers to a file instead of a directory.
                <para>-or-</para>
            The specified path is invalid (for example, it is on an unmapped drive).
            </exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.EnumerateDirectories(System.String)">
            <summary>
            Returns an enumerable collection of directory names in a specified path.
            </summary>
            <param name="path">The directory to search.</param>
            <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path"/>.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid, such as referring to an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/> is a file name.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.EnumerateDirectories(System.String,System.String)">
            <summary>
            Returns an enumerable collection of directory names that match a search pattern in a specified path.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path"/> and that match the specified search pattern.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
                <para>-or-</para>
            <paramref name="searchPattern"/> does not contain a valid pattern.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
                <para>-or-</para>
            <paramref name="searchPattern"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid, such as referring to an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/> is a file name.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns an enumerable collection of directory names that match a search pattern in a specified path, and optionally searches subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <param name="searchOption">
            One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.<br/>
            The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>
            An enumerable collection of the full names (including paths) for the directories in the directory specified by path and that match the specified search pattern and option.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
                <para>-or-</para>
            <paramref name="searchPattern"/> does not contain a valid pattern.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
                <para>-or-</para>
            <paramref name="searchPattern"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchPattern"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid, such as referring to an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/> is a file name.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.EnumerateFiles(System.String)">
            <summary>
            Returns an enumerable collection of file names in a specified path.
            </summary>
            <param name="path">The directory to search.</param>
            <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path"/>.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid, such as referring to an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/> is a file name.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.EnumerateFiles(System.String,System.String)">
            <summary>
            Returns an enumerable collection of file names that match a search pattern in a specified path.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <returns>
            An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path"/> and that match the specified search pattern.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
                <para>-or-</para>
            <paramref name="searchPattern"/> does not contain a valid pattern.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
                <para>-or-</para>
            <paramref name="searchPattern"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid, such as referring to an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/> is a file name.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns an enumerable collection of file names that match a search pattern in a specified path, and optionally searches subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <param name="searchOption">
            One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.<br/>
            The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>
            An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path"/> and that match the specified search pattern and option.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
                <para>-or-</para>
            <paramref name="searchPattern"/> does not contain a valid pattern.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
                <para>-or-</para>
            <paramref name="searchPattern"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchPattern"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid, such as referring to an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/> is a file name.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.EnumerateFileSystemEntries(System.String)">
            <summary>
            Returns an enumerable collection of file-system entries in a specified path.
            </summary>
            <param name="path">The directory to search.</param>
            <returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path"/>.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid, such as referring to an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/> is a file name.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.EnumerateFileSystemEntries(System.String,System.String)">
            <summary>
            Returns an enumerable collection of file-system entries that match a search pattern in a specified path.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <returns>
            An enumerable collection of file-system entries in the directory specified by <paramref name="path"/> and that match the specified search pattern.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
                <para>-or-</para>
            <paramref name="searchPattern"/> does not contain a valid pattern.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
                <para>-or-</para>
            <paramref name="searchPattern"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid, such as referring to an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/> is a file name.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns an enumerable collection of file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <param name="searchOption">
            One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.<br/>
            The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>
            An enumerable collection of file-system entries in the directory specified by <paramref name="path"/> and that match the specified search pattern and option.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
                <para>-or-</para>
            <paramref name="searchPattern"/> does not contain a valid pattern.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
                <para>-or-</para>
            <paramref name="searchPattern"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchPattern"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid, such as referring to an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/> is a file name.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.Exists(System.String)">
            <summary>
            Determines whether the given path refers to an existing directory on disk.
            </summary>
            <param name="path">The path to test.</param>
            <returns>
            <see langword="true"/> if path refers to an existing directory; otherwise, <see langword="false"/>
            </returns>
            <remarks>
            Note that this method will return false if any error occurs while trying to determine
            if the specified directory exists. This includes situations that would normally result in
            thrown exceptions including (but not limited to) passing in a directory name with invalid
            or too many characters, an I/O error such as a failing or missing disk, or if the caller
            does not have Windows or Code Access Security (CAS) permissions to to read the directory.
            </remarks>
        </member>
        <member name="M:LongPath.LongPathDirectory.GetCreationTime(System.String)">
            <summary>
            Gets the creation date and time of a directory.
            </summary>
            <param name="path">The path of the directory.</param>
            <returns>A structure that is set to the creation date and time for the specified directory. This value is expressed in local time.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.GetCreationTimeUtc(System.String)">
            <summary>
            Gets the creation date and time, in Coordinated Universal Time (UTC) format, of a directory.
            </summary>
            <param name="path">The path of the directory.</param>
            <returns>A structure that is set to the creation date and time for the specified directory. This value is expressed in UTC time.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.GetCurrentDirectory">
            <summary>
            Gets the current working directory of the application.
            </summary>
            <returns>A string that contains the path of the current working directory, and does not end with a backslash (<c>\</c>).</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.GetDirectories(System.String)">
            <summary>
            Gets the names of subdirectories (including their paths) in the specified directory.
            </summary>
            <param name="path">The path for which an array of subdirectory names is returned.</param>
            <returns>An array of the full names (including paths) of subdirectories in the specified path.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid, such as referring to an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/> is a file name.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.GetDirectories(System.String,System.String)">
            <summary>
            Gets the names of subdirectories (including their paths) that match the specified search pattern in the current directory.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <returns>An array of the full names (including paths) of the subdirectories that match the search pattern.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
                <para>-or-</para>
            <paramref name="searchPattern"/> does not contain a valid pattern.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
                <para>-or-</para>
            <paramref name="searchPattern"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid, such as referring to an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/> is a file name.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the names of the subdirectories (including their paths) that match the specified search pattern in the current directory, and optionally searches subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <param name="searchOption">
            One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.<br/>
            The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>An array of the full names (including paths) of the subdirectories that match the search pattern.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
                <para>-or-</para>
            <paramref name="searchPattern"/> does not contain a valid pattern.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
                <para>-or-</para>
            <paramref name="searchPattern"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchPattern"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid, such as referring to an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/> is a file name.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.GetDirectoryRoot(System.String)">
            <summary>
            Returns the volume information, root information, or both for the specified path.
            </summary>
            <param name="path">The path of a file or directory.</param>
            <returns>A string that contains the volume information, root information, or both for the specified path.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.GetFiles(System.String)">
            <summary>
            Returns the names of files (including their paths) in the specified directory.
            </summary>
            <param name="path">The directory from which to retrieve the files.</param>
            <returns>An array of the full names (including paths) for the files in the specified directory.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid, such as referring to an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/> is a file name.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.GetFiles(System.String,System.String)">
            <summary>
            Returns the names of files (including their paths) that match the specified search pattern in the specified directory.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <returns>An array of the full names (including paths) for the files in the specified directory that match the specified search pattern.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
                <para>-or-</para>
            <paramref name="searchPattern"/> does not contain a valid pattern.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
                <para>-or-</para>
            <paramref name="searchPattern"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid, such as referring to an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/> is a file name.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns the names of files (including their paths) that match the specified search pattern in the specified directory, using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <param name="searchOption">
            One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.<br/>
            The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>An array of the full names (including paths) for the files in the specified directory that match the specified search pattern and option.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
                <para>-or-</para>
            <paramref name="searchPattern"/> does not contain a valid pattern.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
                <para>-or-</para>
            <paramref name="searchPattern"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchPattern"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid, such as referring to an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/> is a file name.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.GetFileSystemEntries(System.String)">
            <summary>
            Returns the names of all files and subdirectories in the specified directory.
            </summary>
            <param name="path">The directory for which file and subdirectory names are returned.</param>
            <returns>An array of the names of files and subdirectories in the specified directory.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid, such as referring to an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/> is a file name.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.GetFileSystemEntries(System.String,System.String)">
            <summary>
            Returns an array of file system entries that match the specified search criteria.
            </summary>
            <param name="path">The path to be searched.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <returns>An array of file system entries that match the specified search criteria.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
                <para>-or-</para>
            <paramref name="searchPattern"/> does not contain a valid pattern.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
                <para>-or-</para>
            <paramref name="searchPattern"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid, such as referring to an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/> is a file name.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets an array of all the file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.
            </summary>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <param name="searchOption">
            One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.<br/>
            The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>An array of file system entries that match the specified search criteria.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
                <para>-or-</para>
            <paramref name="searchPattern"/> does not contain a valid pattern.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
                <para>-or-</para>
            <paramref name="searchPattern"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchPattern"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid, such as referring to an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException"><paramref name="path"/> is a file name.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.GetLastAccessTime(System.String)">
            <summary>
            Returns the date and time the specified file or directory was last accessed.
            </summary>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A structure that is set to the date and time the specified file or directory was last accessed. This value is expressed in local time.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.GetLastAccessTimeUtc(System.String)">
            <summary>
            Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.
            </summary>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A structure that is set to the date and time the specified file or directory was last accessed. This value is expressed in UTC time.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.GetLastWriteTime(System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="path">The file or directory for which to obtain modification date and time information.</param>
            <returns>A structure that is set to the date and time the specified file or directory was last written to. This value is expressed in local time.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.GetLastWriteTimeUtc(System.String)">
            <summary>
            Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last written to.
            </summary>
            <param name="path">The file or directory for which to obtain modification date and time information.</param>
            <returns>A structure that is set to the date and time the specified file or directory was last written to. This value is expressed in UTC time.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.GetLogicalDrives">
            <summary>
            Retrieves the names of the logical drives on this computer in the form "<c>&lt;drive letter&gt;:\</c>".
            </summary>
            <returns>The logical drives on this computer.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurred (for example, a disk error).</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.GetParent(System.String)">
            <summary>
            Retrieves the parent directory of the specified path, including both absolute and relative paths.
            </summary>
            <param name="path">The path for which to retrieve the parent directory.</param>
            <returns>The parent directory, or <see langword="null"/> if <paramref name="path"/> is the root directory, including the root of a UNC server or share name.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.SetCreationTime(System.String,System.DateTime)">
            <summary>
            Sets the creation date and time for the specified file or directory.
            </summary>
            <param name="path">The file or directory for which to set the creation date and time information.</param>
            <param name="creationTime">An object that contains the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="creationTime"/> specifies a value outside the range of dates or times permitted for this operation.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the creation date and time, in Coordinated Universal Time (UTC) format, for the specified file or directory.
            </summary>
            <param name="path">The file or directory for which to set the creation date and time information.</param>
            <param name="creationTimeUtc">An object that contains the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="creationTimeUtc"/> specifies a value outside the range of dates or times permitted for this operation.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.SetCurrentDirectory(System.String)">
            <summary>
            Sets the application's current working directory to the specified directory.
            </summary>
            <param name="path">The path to which the current working directory is set.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified directory was not found.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.SetLastAccessTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time the specified file or directory was last accessed.
            </summary>
            <param name="path">The file or directory for which to set the access date and time information.</param>
            <param name="lastAccessTime">An object that contains the value to set for the access date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastAccessTime"/> specifies a value outside the range of dates or times permitted for this operation.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.
            </summary>
            <param name="path">The file or directory for which to set the access date and time information.</param>
            <param name="lastAccessTimeUtc">An object that contains the value to set for the access date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastAccessTimeUtc"/> specifies a value outside the range of dates or times permitted for this operation.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time a directory was last written to.
            </summary>
            <param name="path">The path of the directory.</param>
            <param name="lastWriteTime">The date and time the directory was last written to. This value is expressed in local time.</param>
            <exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastWriteTime"/> specifies a value outside the range of dates or times permitted for this operation.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in Coordinated Universal Time (UTC) format, that a directory was last written to.
            </summary>
            <param name="path">The path of the directory.</param>
            <param name="lastWriteTimeUtc">The date and time the directory was last written to. This value is expressed in UTC time.</param>
            <exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastWriteTimeUtc"/> specifies a value outside the range of dates or times permitted for this operation.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption,System.Boolean,System.Boolean)">
            <summary>
            Returns a enumerable containing the file and directory information of the specified directory
            that match the specified search pattern, and optionally searches subdirectories.
            </summary>
            <param name="path">A <see cref="T:System.String"/> containing the path of the directory to search.</param>
            <param name="searchPattern">
            A <see cref="T:System.String"/> containing search pattern to match against the names of the
            files and directories in <paramref name="path"/>, otherwise, <see langword="null"/>
            or an empty string ("") to use the default search pattern, "*".
            </param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="includeDirectories">If set to <see langword="true"/>, directories will be included in the result.</param>
            <param name="includeFiles">If set to <see langword="true"/>, files will be included in the result.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the file and directory information within <paramref name="path"/> that match <paramref name="searchPattern"/>.
            </returns>
        </member>
        <member name="M:LongPath.LongPathDirectory.EnumerateFileSystemIterator(System.String,System.String,System.IO.SearchOption,System.Boolean,System.Boolean)">
            <summary>
            Returns a enumerable containing the file and directory information of the specified directory
            that match the specified search pattern.
            </summary>
            <param name="path">A <see cref="T:System.String"/> containing the path of the directory to search.</param>
            <param name="searchPattern">Search pattern.</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="includeDirectories">If set to <see langword="true"/>, directories will be included in the result.</param>
            <param name="includeFiles">If set to <see langword="true"/>, files will be included in the result.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the file and directory information within <paramref name="path"/> that match <paramref name="searchPattern"/>.
            </returns>
        </member>
        <member name="M:LongPath.LongPathDirectory.BeginFind(System.String,LongPath.Native.Win32FindData@)">
            <summary>
            Start enumeration by calling the <see cref="M:LongPath.Native.NativeMethods.FindFirstFile(System.String,LongPath.Native.Win32FindData@)"/> method.
            </summary>
            <param name="normalizedPathWithSearchPattern">The normalized path with search pattern.</param>
            <param name="findData">Data received.</param>
            <returns>Handle to the first file system entry found.</returns>
        </member>
        <member name="M:LongPath.LongPathDirectory.NormalizeSearchPattern(System.String)">
            <summary>
            Normalizes the <paramref name="searchPattern"/> given.
            </summary>
            <param name="searchPattern">Search pattern.</param>
            <returns>Normalized search pattern.</returns>
        </member>
        <member name="M:LongPath.LongPathDirectory.IsCurrentOrParentDirectory(System.String)">
            <summary>
            Determines whether the <paramref name="directoryName"/> given is a current or a parent directory.
            </summary>
            <param name="directoryName">Directory name.</param>
            <returns>
            <see langword="true"/>, if the <paramref name="directoryName"/> is current or a parent directory; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:LongPath.LongPathDirectoryInfo">
            <summary>
            Exposes instance methods for creating, moving, and enumerating through directories and subdirectories.
            </summary>
        </member>
        <member name="M:LongPath.LongPathDirectoryInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LongPath.LongPathDirectoryInfo"/> class.
            </summary>
            <param name="path">The fully qualified name of a directory, or the relative directory name.</param>
        </member>
        <member name="M:LongPath.LongPathDirectoryInfo.#ctor(LongPath.Native.Win32FindData)">
            <summary>
            Initializes a new instance of the <see cref="T:LongPath.LongPathDirectoryInfo"/> class.
            </summary>
            <param name="entryData">Entry data.</param>
        </member>
        <member name="P:LongPath.LongPathDirectoryInfo.Parent">
            <summary>
            Gets the parent directory of a specified subdirectory.
            </summary>
        </member>
        <member name="M:LongPath.LongPathDirectoryInfo.Create">
            <summary>
            Creates a directory.
            </summary>
            <exception cref="T:System.IO.IOException">The directory cannot be created.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectoryInfo.CreateSubdirectory(System.String)">
            <summary>
            Creates a subdirectory or subdirectories on the specified path.
            The specified path can be relative to this instance of the <see cref="T:LongPath.LongPathDirectoryInfo"/> class.
            </summary>
            <param name="path">The specified path.</param>
            <returns>The last directory specified in <paramref name="path"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> does not specify a valid file path or contains invalid characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException">
            The subdirectory cannot be created.
                <para>-or-</para>
            A file or directory already has the name specified by <paramref name="path"/>.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">The caller does not have code access permission to create the directory.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> contains a colon character (<c>:</c>) that is not part of a drive label ("<c>C:\</c>").</exception>
        </member>
        <member name="M:LongPath.LongPathDirectoryInfo.Delete">
            <summary>
            Deletes this <see cref="T:LongPath.LongPathDirectoryInfo"/> if it is empty.
            </summary>
            <exception cref="T:System.UnauthorizedAccessException">The directory contains a read-only file.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The directory described by this <see cref="T:LongPath.LongPathDirectoryInfo"/> object does not exist or could not be found.</exception>
            <exception cref="T:System.IO.IOException">
            The directory is not empty.
                <para>-or-</para>
            The directory is the application's current working directory.
                <para>-or-</para>
            There is an open handle on the directory, and the operating system is Windows XP or earlier.
            </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectoryInfo.Delete(System.Boolean)">
            <summary>
            Deletes this instance of a <see cref="T:LongPath.LongPathDirectoryInfo"/>, specifying whether to delete subdirectories and files.
            </summary>
            <param name="recursive"><see langword="true"/> to remove directories, subdirectories, and files in path; otherwise, <see langword="false"/>.</param>
            <exception cref="T:System.UnauthorizedAccessException">The directory contains a read-only file.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The directory described by this <see cref="T:LongPath.LongPathDirectoryInfo"/> object does not exist or could not be found.</exception>
            <exception cref="T:System.IO.IOException">
            The directory is read-only.
                <para>-or-</para>
            The directory contains one or more files or subdirectories and <paramref name="recursive"/> is <see langword="false"/>.
                <para>-or-</para>
            The directory is the application's current working directory.
                <para>-or-</para>
            There is an open handle on the directory, and the operating system is Windows XP or earlier.
            </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectoryInfo.EnumerateDirectories">
            <summary>
            Returns an enumerable collection of directory information in the current directory.
            </summary>
            <returns>
            An enumerable collection of directories in the current directory.
            </returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:LongPath.LongPathDirectoryInfo"/> object is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectoryInfo.EnumerateDirectories(System.String)">
            <summary>
            Returns an enumerable collection of directory information that matches a specified search pattern.
            </summary>
            <param name="searchPattern">The search string. The default pattern is "<c>*</c>", which returns all directories.</param>
            <returns>An enumerable collection of directories that matches <paramref name="searchPattern"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="searchPattern"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:LongPath.LongPathDirectoryInfo"/> object is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)">
            <summary>
            Returns an enumerable collection of directory information that matches a specified search pattern and search subdirectory option.
            </summary>
            <param name="searchPattern">The search string. The default pattern is "<c>*</c>", which returns all directories.</param>
            <param name="searchOption">
            One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.
            The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>An enumerable collection of directories that matches <paramref name="searchPattern"/> and <paramref name="searchOption"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="searchPattern"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:LongPath.LongPathDirectoryInfo"/> object is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectoryInfo.EnumerateFiles">
            <summary>
            Returns an enumerable collection of file information in the current directory.
            </summary>
            <returns>An enumerable collection of the files in the current directory.</returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:LongPath.LongPathFileInfo"/> object is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectoryInfo.EnumerateFiles(System.String)">
            <summary>
            Returns an enumerable collection of file information that matches a search pattern.
            </summary>
            <param name="searchPattern">The search string. The default pattern is "<c>*</c>", which returns all files.</param>
            <returns>An enumerable collection of files that matches <paramref name="searchPattern"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="searchPattern"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:LongPath.LongPathFileInfo"/> object is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)">
            <summary>
            Returns an enumerable collection of file information that matches a specified search pattern and search subdirectory option.
            </summary>
            <param name="searchPattern">The search string. The default pattern is "<c>*</c>", which returns all files.</param>
            <param name="searchOption">
            One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.
            The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>An enumerable collection of files that matches <paramref name="searchPattern"/> and <paramref name="searchOption"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="searchPattern"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:LongPath.LongPathFileInfo"/> object is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectoryInfo.EnumerateFileSystemInfos">
            <summary>
            Returns an enumerable collection of file system information in the current directory.
            </summary>
            <returns>An enumerable collection of file system information in the current directory.</returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:LongPath.LongPathFileSystemInfo"/> object is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectoryInfo.EnumerateFileSystemInfos(System.String)">
            <summary>
            Returns an enumerable collection of file system information that matches a specified search pattern.
            </summary>
            <param name="searchPattern">The search string. The default pattern is "<c>*</c>", which returns all files or directories.</param>
            <returns>An enumerable collection of file system information objects that matches <paramref name="searchPattern"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="searchPattern"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:LongPath.LongPathFileSystemInfo"/> object is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)">
            <summary>
            Returns an enumerable collection of file system information that matches a specified search pattern and search subdirectory option.
            </summary>
            <param name="searchPattern">The search string. The default pattern is "<c>*</c>", which returns all files or directories.</param>
            <param name="searchOption">
            One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.
            The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>An enumerable collection of file system information objects that matches <paramref name="searchPattern"/> and <paramref name="searchOption"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="searchPattern"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:LongPath.LongPathFileSystemInfo"/> object is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectoryInfo.GetDirectories">
            <summary>
            Returns the subdirectories of the current directory.
            </summary>
            <returns>An array of <see cref="T:LongPath.LongPathDirectoryInfo"/> objects.</returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:LongPath.LongPathDirectoryInfo"/> object is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectoryInfo.GetDirectories(System.String)">
            <summary>
            Returns an array of directories in the current <see cref="T:LongPath.LongPathDirectoryInfo"/> matching the given search criteria.
            </summary>
            <param name="searchPattern">The search string. For example, "<c>System*</c>" can be used to search for all directories that begin with the word "<c>System</c>".</param>
            <returns>An array of type <see cref="T:LongPath.LongPathDirectoryInfo"/> matching <paramref name="searchPattern"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="searchPattern"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:LongPath.LongPathDirectoryInfo"/> object is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)">
            <summary>
            Returns an array of directories in the current <see cref="T:LongPath.LongPathDirectoryInfo"/> matching the given search criteria and using a value to determine whether to search subdirectories.
            </summary>
            <param name="searchPattern">The search string. For example, "<c>System*</c>" can be used to search for all directories that begin with the word "<c>System</c>".</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.</param>
            <returns>An array of type <see cref="T:LongPath.LongPathDirectoryInfo"/> matching <paramref name="searchPattern"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="searchPattern"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:LongPath.LongPathDirectoryInfo"/> object is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectoryInfo.GetFiles">
            <summary>
            Returns a file list from the current directory.
            </summary>
            <returns>An array of type <see cref="T:LongPath.LongPathFileInfo"/>.</returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:LongPath.LongPathFileInfo"/> object is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectoryInfo.GetFiles(System.String)">
            <summary>
            Returns a file list from the current directory matching the given search pattern.
            </summary>
            <param name="searchPattern">The search string, such as "<c>*.txt</c>".</param>
            <returns>An array of type <see cref="T:LongPath.LongPathFileInfo"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="searchPattern"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:LongPath.LongPathFileInfo"/> object is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectoryInfo.GetFiles(System.String,System.IO.SearchOption)">
            <summary>
            Returns a file list from the current directory matching the given search pattern and using a value to determine whether to search subdirectories.
            </summary>
            <param name="searchPattern">The search string. For example, "<c>System*</c>" can be used to search for all files that begin with the word "<c>System</c>".</param>
            <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.</param>
            <returns>An array of type <see cref="T:LongPath.LongPathFileInfo"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="searchPattern"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:LongPath.LongPathFileInfo"/> object is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectoryInfo.GetFileSystemInfos">
            <summary>
            Returns an array of strongly typed <see cref="T:LongPath.LongPathFileSystemInfo"/> entries representing all the files and subdirectories in a directory.
            </summary>
            <returns>An array of strongly typed <see cref="T:LongPath.LongPathFileSystemInfo"/> entries.</returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:LongPath.LongPathFileSystemInfo"/> object is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectoryInfo.GetFileSystemInfos(System.String)">
            <summary>
            Retrieves an array of strongly typed <see cref="T:LongPath.LongPathFileSystemInfo"/> objects representing the files and subdirectories that match the specified search criteria.
            </summary>
            <param name="searchPattern">The search string. For example, "<c>System*</c>" can be used to search for all directories that begin with the word "<c>System</c>".</param>
            <returns>An array of strongly typed <see cref="T:LongPath.LongPathFileSystemInfo"/> objects matching the search criteria.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="searchPattern"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:LongPath.LongPathFileSystemInfo"/> object is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)">
            <summary>
            Retrieves an array of <see cref="T:LongPath.LongPathFileSystemInfo"/> objects that represent the files and subdirectories matching the specified search criteria.
            </summary>
            <param name="searchPattern">The search string. The default pattern is "<c>*</c>", which returns all files and directories.</param>
            <param name="searchOption">
            One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.
            The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly"/>.
            </param>
            <returns>An array of file system entries that match the search criteria.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="searchPattern"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption"/> is not a valid <see cref="T:System.IO.SearchOption"/> value.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:LongPath.LongPathFileSystemInfo"/> object is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathDirectoryInfo.UpdateProperties">
            <summary>
            Updates the current class' properties.
            </summary>
        </member>
        <member name="T:LongPath.LongPathFile">
            <summary>
            Provides static methods for creating, copying, deleting, moving, and opening of files
            with long paths, that is, paths that exceed 259 characters.
            </summary>
            <remarks>
            This class contains methods taken from the <c>http://bcl.codeplex.com/</c> <c>LongPath</c> project.
            They were modified to support UNC paths.
            </remarks>
        </member>
        <member name="F:LongPath.LongPathFile.DefaultBufferSize">
            <summary>
            Default stream buffer size.
            </summary>
        </member>
        <member name="M:LongPath.LongPathFile.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Appends lines to a file, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.
            </summary>
            <param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param>
            <param name="contents">The lines to append to the file.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="path"/> or <paramref name="contents"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path"/> was not found.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/> exceeds the system-defined maximum length.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path"/> specifies a file that is read-only.
                <para>-or-</para>
            This operation is not supported on the current platform.
                <para>-or-</para>
            <paramref name="path"/> is a directory.
                <para>-or-</para>
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:LongPath.LongPathFile.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Appends lines to a file, and then closes the file.
            If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.
            </summary>
            <param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param>
            <param name="contents">The lines to append to the file.</param>
            <param name="encoding">The character encoding to use.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="path"/>, <paramref name="contents"/>, or <paramref name="encoding"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path"/> was not found.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/> exceeds the system-defined maximum length.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path"/> specifies a file that is read-only.
                <para>-or-</para>
            This operation is not supported on the current platform.
                <para>-or-</para>
            <paramref name="path"/> is a directory.
                <para>-or-</para>
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:LongPath.LongPathFile.AppendAllText(System.String,System.String)">
            <summary>
            Appends the specified string to the file, creating the file if it does not already exist.
            </summary>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="path"/> or <paramref name="contents"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path"/> was not found.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/> exceeds the system-defined maximum length.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path"/> specifies a file that is read-only.
                <para>-or-</para>
            This operation is not supported on the current platform.
                <para>-or-</para>
            <paramref name="path"/> is a directory.
                <para>-or-</para>
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:LongPath.LongPathFile.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Appends the specified string to the file, creating the file if it does not already exist.
            </summary>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <param name="encoding">The character encoding to use.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="path"/>, <paramref name="contents"/>, or <paramref name="encoding"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path"/> was not found.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/> exceeds the system-defined maximum length.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path"/> specifies a file that is read-only.
                <para>-or-</para>
            This operation is not supported on the current platform.
                <para>-or-</para>
            <paramref name="path"/> is a directory.
                <para>-or-</para>
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:LongPath.LongPathFile.AppendText(System.String)">
            <summary>
            Creates a <see cref="T:System.IO.StreamWriter"/> that appends UTF-8 encoded text to an existing file, or to a new file if the specified file does not exist.
            </summary>
            <param name="path">The path to the file to append to.</param>
            <returns>A stream writer that appends UTF-8 encoded text to the specified file or to a new file.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path"/> was not found.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/> exceeds the system-defined maximum length.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path"/> specifies a file that is read-only.
                <para>-or-</para>
            This operation is not supported on the current platform.
                <para>-or-</para>
            <paramref name="path"/> is a directory.
                <para>-or-</para>
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:LongPath.LongPathFile.Copy(System.String,System.String)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is allowed.
            </summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destFileName">The name of the destination file. This cannot be a directory.</param>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
                <para>-or-</para>
            <paramref name="destFileName"/>is read-only.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
                <para>-or-</para>
            <paramref name="sourceFileName"/> or <paramref name="destFileName"/> specifies a directory.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourceFileName"/> or <paramref name="destFileName"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="sourceFileName"/> was not found.</exception>
            <exception cref="T:System.IO.IOException">
            <paramref name="destFileName"/> exists.
                <para>-or-</para>
            An I/O error has occurred.
            </exception>
            <exception cref="T:System.NotSupportedException"><paramref name="sourceFileName"/> or <paramref name="destFileName"/> is in an invalid format.</exception>
        </member>
        <member name="M:LongPath.LongPathFile.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is allowed.
            </summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="overwrite"><see langword="true"/> if the destination file can be overwritten; otherwise, <see langword="false"/>.</param>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
                <para>-or-</para>
            <paramref name="destFileName"/>is read-only.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
                <para>-or-</para>
            <paramref name="sourceFileName"/> or <paramref name="destFileName"/> specifies a directory.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourceFileName"/> or <paramref name="destFileName"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName"/> or <paramref name="destFileName"/> is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="sourceFileName"/> was not found.</exception>
            <exception cref="T:System.IO.IOException">
            <paramref name="destFileName"/> exists and overwrite is <see langword="false"/>.
                <para>-or-</para>
            An I/O error has occurred.
            </exception>
            <exception cref="T:System.NotSupportedException"><paramref name="sourceFileName"/> or <paramref name="destFileName"/> is in an invalid format.</exception>
        </member>
        <member name="M:LongPath.LongPathFile.Create(System.String)">
            <summary>
            Creates or overwrites a file in the specified path.
            </summary>
            <param name="path">The name of the file.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> that provides read/write access to the file specified in <paramref name="path"/>.</returns>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
                <para>-or-</para>
            <paramref name="path"/> specified a file that is read-only.
                <para>-or-</para>
            <see cref="F:System.IO.FileOptions.Encrypted"/> is specified for options and file encryption is not supported on the current platform.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
        </member>
        <member name="M:LongPath.LongPathFile.Create(System.String,System.Int32)">
            <summary>
            Creates or overwrites the specified file.
            </summary>
            <param name="path">The name of the file.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> with the specified buffer size that provides read/write access to the file specified in <paramref name="path"/>.</returns>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
                <para>-or-</para>
            <paramref name="path"/> specified a file that is read-only.
                <para>-or-</para>
            <see cref="F:System.IO.FileOptions.Encrypted"/> is specified for options and file encryption is not supported on the current platform.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
        </member>
        <member name="M:LongPath.LongPathFile.Create(System.String,System.Int32,System.IO.FileOptions)">
            <summary>
            Creates or overwrites the specified file, specifying a buffer size and a <see cref="T:System.IO.FileOptions"/> value that describes how to create or overwrite the file.
            </summary>
            <param name="path">The name of the file.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <param name="options">One of the <see cref="T:System.IO.FileOptions"/> values that describes how to create or overwrite the file.</param>
            <returns>A new file with the specified buffer size.</returns>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
                <para>-or-</para>
            <paramref name="path"/> specified a file that is read-only.
                <para>-or-</para>
            <see cref="F:System.IO.FileOptions.Encrypted"/> is specified for options and file encryption is not supported on the current platform.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
        </member>
        <member name="M:LongPath.LongPathFile.CreateText(System.String)">
            <summary>
            Creates or opens a file for writing UTF-8 encoded text.
            </summary>
            <param name="path">The file to be opened for writing.</param>
            <returns>A <see cref="T:System.IO.StreamWriter"/> that writes to the specified file using UTF-8 encoding.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/> exceeds the system-defined maximum length.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path"/> specifies a file that is read-only.
                <para>-or-</para>
            This operation is not supported on the current platform.
                <para>-or-</para>
            <paramref name="path"/> is a directory.
                <para>-or-</para>
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:LongPath.LongPathFile.Delete(System.String)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="path">The name of the file to be deleted. Wildcard characters are not supported.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">
            The specified file is in use.
                <para>-or-</para>
            There is an open handle on the file, and the operating system is Windows XP or earlier.
            </exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/> exceeds the system-defined maximum length.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path"/> is a directory.
                <para>-or-</para>
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:LongPath.LongPathFile.Exists(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="path">The file to check.</param>
            <returns><see langword="true"/> if the caller has the required permissions and <paramref name="path"/> contains the name of an existing file; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:LongPath.LongPathFile.GetAttributes(System.String)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes"/> of the file on the path.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the file on the path.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty, contains only white spaces, or contains invalid characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path"/> represents a file and is invalid, such as being on an unmapped drive, or the file cannot be found.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException">This file is being used by another process.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:LongPath.LongPathFile.GetCreationTime(System.String)">
            <summary>
            Returns the creation date and time of the specified file or directory.
            </summary>
            <param name="path">The file or directory for which to obtain creation date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file or directory. This value is expressed in local time.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty, contains only white spaces, or contains invalid characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
        </member>
        <member name="M:LongPath.LongPathFile.GetCreationTimeUtc(System.String)">
            <summary>
            Returns the creation date and time, in coordinated universal time (UTC), of the specified file or directory.
            </summary>
            <param name="path">The file or directory for which to obtain creation date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file or directory. This value is expressed in UTC time.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty, contains only white spaces, or contains invalid characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
        </member>
        <member name="M:LongPath.LongPathFile.GetLastAccessTime(System.String)">
            <summary>
            Returns the date and time the specified file or directory was last accessed.
            </summary>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last accessed. This value is expressed in local time.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty, contains only white spaces, or contains invalid characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
        </member>
        <member name="M:LongPath.LongPathFile.GetLastAccessTimeUtc(System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last accessed.
            </summary>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last accessed. This value is expressed in UTC time.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty, contains only white spaces, or contains invalid characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
        </member>
        <member name="M:LongPath.LongPathFile.GetLastWriteTime(System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="path">The file or directory for which to obtain write date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written to. This value is expressed in local time.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty, contains only white spaces, or contains invalid characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
        </member>
        <member name="M:LongPath.LongPathFile.GetLastWriteTimeUtc(System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last written to.
            </summary>
            <param name="path">The file or directory for which to obtain write date and time information.</param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written to. This value is expressed in UTC time.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is empty, contains only white spaces, or contains invalid characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
        </member>
        <member name="M:LongPath.LongPathFile.Move(System.String,System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="sourceFileName">The name of the file to move.</param>
            <param name="destFileName">The new path for the file.</param>
            <exception cref="T:System.IO.IOException">
            The destination file already exists.
                <para>-or-</para>
            <paramref name="sourceFileName"/> was not found.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourceFileName"/> or <paramref name="destFileName"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="sourceFileName"/> or <paramref name="destFileName"/> is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in sourceFileName or destFileName is invalid, (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="sourceFileName"/> or <paramref name="destFileName"/> is in an invalid format.</exception>
        </member>
        <member name="M:LongPath.LongPathFile.Open(System.String,System.IO.FileMode)">
            <summary>
            Opens a <see cref="T:System.IO.FileStream"/> on the specified path with read/write access.
            </summary>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> opened in the specified mode and path, with read/write access and not shared.</returns>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
                <para>-or-</para>
            <paramref name="path"/> specified a file that is read-only.
                <para>-or-</para>
            <see cref="F:System.IO.FileOptions.Encrypted"/> is specified for options and file encryption is not supported on the current platform.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
        </member>
        <member name="M:LongPath.LongPathFile.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a <see cref="T:System.IO.FileStream"/> on the specified path, with the specified mode and access.
            </summary>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file.</param>
            <returns>An unshared <see cref="T:System.IO.FileStream"/> that provides access to the specified file, with the specified mode and access.</returns>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
                <para>-or-</para>
            <paramref name="path"/> specified a file that is read-only.
                <para>-or-</para>
            <see cref="F:System.IO.FileOptions.Encrypted"/> is specified for options and file encryption is not supported on the current platform.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
        </member>
        <member name="M:LongPath.LongPathFile.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens a <see cref="M:LongPath.LongPathFile.Open(System.String,System.IO.FileMode,System.IO.FileAccess)"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.
            </summary>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> value specifying the type of access other threads have to the file.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</returns>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
                <para>-or-</para>
            <paramref name="path"/> specified a file that is read-only.
                <para>-or-</para>
            <see cref="F:System.IO.FileOptions.Encrypted"/> is specified for options and file encryption is not supported on the current platform.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
        </member>
        <member name="M:LongPath.LongPathFile.OpenRead(System.String)">
            <summary>
            Opens an existing file for reading.
            </summary>
            <param name="path">The file to be opened for reading.</param>
            <returns>A read-only <see cref="T:System.IO.FileStream"/> on the specified path.</returns>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
                <para>-or-</para>
            <paramref name="path"/> specified a file that is read-only.
                <para>-or-</para>
            <see cref="F:System.IO.FileOptions.Encrypted"/> is specified for options and file encryption is not supported on the current platform.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
        </member>
        <member name="M:LongPath.LongPathFile.OpenText(System.String)">
            <summary>
            Opens an existing UTF-8 encoded text file for reading.
            </summary>
            <param name="path">The file to be opened for reading.</param>
            <returns>A <see cref="T:System.IO.StreamReader"/> on the specified path.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/> exceeds the system-defined maximum length.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            This operation is not supported on the current platform.
                <para>-or-</para>
            <paramref name="path"/> is a directory.
                <para>-or-</para>
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:LongPath.LongPathFile.OpenWrite(System.String)">
            <summary>
            Opens an existing file or creates a new file for writing.
            </summary>
            <param name="path">The file to be opened for writing.</param>
            <returns>An unshared <see cref="T:System.IO.FileStream"/> object on the specified path with <see cref="F:System.IO.FileAccess.Write"/> access.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/> exceeds the system-defined maximum length.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path"/> specifies a file that is read-only.
                <para>-or-</para>
            This operation is not supported on the current platform.
                <para>-or-</para>
            <paramref name="path"/> is a directory.
                <para>-or-</para>
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:LongPath.LongPathFile.ReadAllBytes(System.String)">
            <summary>
            Opens a binary file, reads the contents of the file into a byte array, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>A byte array containing the contents of the file.</returns>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
                <para>-or-</para>
            <paramref name="path"/> specified a file that is read-only.
                <para>-or-</para>
            <see cref="F:System.IO.FileOptions.Encrypted"/> is specified for options and file encryption is not supported on the current platform.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
        </member>
        <member name="M:LongPath.LongPathFile.ReadAllLines(System.String)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>A string array containing all lines of the file.</returns>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
                <para>-or-</para>
            <paramref name="path"/> specified a file that is read-only.
                <para>-or-</para>
            <see cref="F:System.IO.FileOptions.Encrypted"/> is specified for options and file encryption is not supported on the current platform.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
        </member>
        <member name="M:LongPath.LongPathFile.ReadAllLines(System.String,System.Text.Encoding)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>A string array containing all lines of the file.</returns>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
                <para>-or-</para>
            <paramref name="path"/> specified a file that is read-only.
                <para>-or-</para>
            <see cref="F:System.IO.FileOptions.Encrypted"/> is specified for options and file encryption is not supported on the current platform.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
        </member>
        <member name="M:LongPath.LongPathFile.ReadAllText(System.String)">
            <summary>
            Opens a file, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>A string containing all lines of the file.</returns>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
                <para>-or-</para>
            <paramref name="path"/> specified a file that is read-only.
                <para>-or-</para>
            <see cref="F:System.IO.FileOptions.Encrypted"/> is specified for options and file encryption is not supported on the current platform.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
        </member>
        <member name="M:LongPath.LongPathFile.ReadAllText(System.String,System.Text.Encoding)">
            <summary>
            Opens a file, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>A string containing all lines of the file.</returns>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
                <para>-or-</para>
            <paramref name="path"/> specified a file that is read-only.
                <para>-or-</para>
            <see cref="F:System.IO.FileOptions.Encrypted"/> is specified for options and file encryption is not supported on the current platform.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
        </member>
        <member name="M:LongPath.LongPathFile.ReadLines(System.String)">
            <summary>
            Reads the lines of a file.
            </summary>
            <param name="path">The file to read.</param>
            <returns>All the lines of the file, or the lines that are the result of a query.</returns>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
                <para>-or-</para>
            <paramref name="path"/> specified a file that is read-only.
                <para>-or-</para>
            <see cref="F:System.IO.FileOptions.Encrypted"/> is specified for options and file encryption is not supported on the current platform.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
        </member>
        <member name="M:LongPath.LongPathFile.ReadLines(System.String,System.Text.Encoding)">
            <summary>
            Read the lines of a file that has a specified encoding.
            </summary>
            <param name="path">The file to read.</param>
            <param name="encoding">The encoding that is applied to the contents of the file.</param>
            <returns>All the lines of the file, or the lines that are the result of a query.</returns>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
                <para>-or-</para>
            <paramref name="path"/> specified a file that is read-only.
                <para>-or-</para>
            <see cref="F:System.IO.FileOptions.Encrypted"/> is specified for options and file encryption is not supported on the current platform.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
        </member>
        <member name="M:LongPath.LongPathFile.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the specified <see cref="T:System.IO.FileAttributes"/> of the file on the specified path.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="fileAttributes">A bitwise combination of the enumeration values.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/> exceeds the system-defined maximum length.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file cannot be found.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path"/> specifies a file that is read-only.
                <para>-or-</para>
            This operation is not supported on the current platform.
                <para>-or-</para>
            <paramref name="path"/> is a directory.
                <para>-or-</para>
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:LongPath.LongPathFile.SetCreationTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time the file was created.
            </summary>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/> exceeds the system-defined maximum length.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file cannot be found.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path"/> specifies a file that is read-only.
                <para>-or-</para>
            This operation is not supported on the current platform.
                <para>-or-</para>
            <paramref name="path"/> is a directory.
                <para>-or-</para>
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:LongPath.LongPathFile.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was created.
            </summary>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="creationTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/> exceeds the system-defined maximum length.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file cannot be found.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path"/> specifies a file that is read-only.
                <para>-or-</para>
            This operation is not supported on the current platform.
                <para>-or-</para>
            <paramref name="path"/> is a directory.
                <para>-or-</para>
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:LongPath.LongPathFile.SetLastAccessTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time the specified file was last accessed.
            </summary>
            <param name="path">The file for which to set the access date and time information.</param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/> exceeds the system-defined maximum length.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file cannot be found.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path"/> specifies a file that is read-only.
                <para>-or-</para>
            This operation is not supported on the current platform.
                <para>-or-</para>
            <paramref name="path"/> is a directory.
                <para>-or-</para>
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:LongPath.LongPathFile.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the specified file was last accessed.
            </summary>
            <param name="path">The file for which to set the access date and time information.</param>
            <param name="lastAccessTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/> exceeds the system-defined maximum length.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file cannot be found.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path"/> specifies a file that is read-only.
                <para>-or-</para>
            This operation is not supported on the current platform.
                <para>-or-</para>
            <paramref name="path"/> is a directory.
                <para>-or-</para>
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:LongPath.LongPathFile.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time that the specified file was last written to.
            </summary>
            <param name="path">The file for which to set the date and time information.</param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/> exceeds the system-defined maximum length.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file cannot be found.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path"/> specifies a file that is read-only.
                <para>-or-</para>
            This operation is not supported on the current platform.
                <para>-or-</para>
            <paramref name="path"/> is a directory.
                <para>-or-</para>
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:LongPath.LongPathFile.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to.
            </summary>
            <param name="path">The file for which to set the date and time information.</param>
            <param name="lastWriteTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/> exceeds the system-defined maximum length.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file cannot be found.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path"/> specifies a file that is read-only.
                <para>-or-</para>
            This operation is not supported on the current platform.
                <para>-or-</para>
            <paramref name="path"/> is a directory.
                <para>-or-</para>
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:LongPath.LongPathFile.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="bytes">The bytes to write to the file.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/> or the byte array is empty.</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/> exceeds the system-defined maximum length.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path"/> specifies a file that is read-only.
                <para>-or-</para>
            This operation is not supported on the current platform.
                <para>-or-</para>
            <paramref name="path"/> is a directory.
                <para>-or-</para>
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:LongPath.LongPathFile.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new file, writes a collection of strings to the file, and then closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="path"/> or <paramref name="contents"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/> exceeds the system-defined maximum length.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path"/> specifies a file that is read-only.
                <para>-or-</para>
            This operation is not supported on the current platform.
                <para>-or-</para>
            <paramref name="path"/> is a directory.
                <para>-or-</para>
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:LongPath.LongPathFile.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <param name="encoding">The character encoding to use.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars"/> method.</exception>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="path"/>, <paramref name="contents"/>, or <paramref name="encoding"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="path"/> exceeds the system-defined maximum length.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path"/> is invalid (for example, the directory doesn’t exist or it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path"/> specifies a file that is read-only.
                <para>-or-</para>
            This operation is not supported on the current platform.
                <para>-or-</para>
            <paramref name="path"/> is a directory.
                <para>-or-</para>
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:LongPath.LongPathFile.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
            <summary>
            Opens a <see cref="M:LongPath.LongPathFile.Open(System.String,System.IO.FileMode,System.IO.FileAccess)"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.
            </summary>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> value specifying the type of access other threads have to the file.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <param name="options">One of the <see cref="T:System.IO.FileOptions"/> values that describes how to create or overwrite the file.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</returns>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
                <para>-or-</para>
            <paramref name="path"/> specified a file that is read-only.
                <para>-or-</para>
            <see cref="F:System.IO.FileOptions.Encrypted"/> is specified for options and file encryption is not supported on the current platform.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path"/> is in an invalid format.</exception>
        </member>
        <member name="M:LongPath.LongPathFile.GetFileHandle(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.IO.FileOptions)">
            <summary>
            Gets the native file handle for the <paramref name="normalizedPath"/>.
            </summary>
            <param name="normalizedPath">Normalized path to the file.</param>
            <param name="mode">
            Whether a file is created if one does not exist, and determines whether the contents of existing files are
            retained or overwritten.
            </param>
            <param name="access">Operations that can be performed on the file.</param>
            <param name="share">Type of access other threads have to the file.</param>
            <param name="options">Additional options.</param>
            <returns>Handle to the opened file.</returns>
        </member>
        <member name="M:LongPath.LongPathFile.GetUnderlyingAccess(System.IO.FileAccess)">
            <summary>
            Converts the <see cref="T:System.IO.FileAccess"/> value into the <see cref="T:LongPath.Native.EFileAccess"/>.
            </summary>
            <param name="access">File access value to convert.</param>
            <returns>The according <see cref="T:LongPath.Native.EFileAccess"/> value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="access"/> is unknown.</exception>
        </member>
        <member name="T:LongPath.LongPathFileInfo">
            <summary>
            Provides properties and instance methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of <see cref="T:System.IO.FileStream"/> objects.
            </summary>
        </member>
        <member name="M:LongPath.LongPathFileInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LongPath.LongPathFileInfo"/> class.
            </summary>
            <param name="path">The fully qualified name of the file, or the relative file name.</param>
        </member>
        <member name="M:LongPath.LongPathFileInfo.#ctor(LongPath.Native.Win32FindData)">
            <summary>
            Initializes a new instance of the <see cref="T:LongPath.LongPathFileInfo"/> class.
            </summary>
            <param name="entryData">Entry data.</param>
        </member>
        <member name="P:LongPath.LongPathFileInfo.DirectoryName">
            <summary>
            Gets a string representing the directory's full path.
            </summary>
        </member>
        <member name="P:LongPath.LongPathFileInfo.IsReadOnly">
            <summary>
            Gets a value indicating whether the current file is read only.
            </summary>
        </member>
        <member name="P:LongPath.LongPathFileInfo.Length">
            <summary>
            Gets the size, in bytes, of the current file.
            </summary>
        </member>
        <member name="M:LongPath.LongPathFileInfo.AppendText">
            <summary>
            Creates a <see cref="T:System.IO.StreamWriter"/> that appends text to the file represented by this instance of the <see cref="T:LongPath.LongPathFileInfo"/>.
            </summary>
            <returns>A new <see cref="T:System.IO.StreamWriter"/>.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            This operation is not supported on the current platform.
                <para>-or-</para>
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:LongPath.LongPathFileInfo.CopyTo(System.String)">
            <summary>
            Copies an existing file to a new file, disallowing the overwriting of an existing file.
            </summary>
            <param name="destFileName">The name of the new file to copy to.</param>
            <returns>A new file with a fully qualified path.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="destFileName"/> is empty, contains only white spaces, or contains invalid characters.</exception>
            <exception cref="T:System.IO.IOException">An error occurs, or the destination file already exists.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="destFileName"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The directory specified in <paramref name="destFileName"/> does not exist.</exception>
            <exception cref="T:System.UnauthorizedAccessException">A directory path is passed in, or the file is being moved to a different drive.</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="destFileName"/> exceeds the system-defined maximum length.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="destFileName"/> is in an invalid format.</exception>
        </member>
        <member name="M:LongPath.LongPathFileInfo.CopyTo(System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file, allowing the overwriting of an existing file.
            </summary>
            <param name="destFileName">The name of the new file to copy to.</param>
            <param name="overwrite"><see langword="true"/> to allow an existing file to be overwritten; otherwise, <see langword="false"/>.</param>
            <returns>
            A new file, or an overwrite of an existing file if overwrite is <see langword="true"/>.
            If the file exists and overwrite is false, an <see cref="T:System.IO.IOException"/> is thrown.
            </returns>
            <exception cref="T:System.ArgumentException"><paramref name="destFileName"/> is empty, contains only white spaces, or contains invalid characters.</exception>
            <exception cref="T:System.IO.IOException">An error occurs, or the destination file already exists and <paramref name="overwrite"/> is <see langword="false"/>.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="destFileName"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The directory specified in <paramref name="destFileName"/> does not exist.</exception>
            <exception cref="T:System.UnauthorizedAccessException">A directory path is passed in, or the file is being moved to a different drive.</exception>
            <exception cref="T:System.IO.PathTooLongException"><paramref name="destFileName"/> exceeds the system-defined maximum length.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="destFileName"/> is in an invalid format.</exception>
        </member>
        <member name="M:LongPath.LongPathFileInfo.Create">
            <summary>
            Creates a file.
            </summary>
            <returns>A new file.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            This operation is not supported on the current platform.
                <para>-or-</para>
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:LongPath.LongPathFileInfo.CreateText">
            <summary>
            Creates the text.
            </summary>
            <returns>A new <see cref="T:System.IO.StreamWriter"/>.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            This operation is not supported on the current platform.
                <para>-or-</para>
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:LongPath.LongPathFileInfo.Delete">
            <summary>
            Permanently deletes a file.
            </summary>
            <exception cref="T:System.IO.IOException">
            The target file is open or memory-mapped on a computer running Microsoft Windows NT.
                <para>-or-</para>
            There is an open handle on the file, and the operating system is Windows XP or earlier.
            </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The path is a directory.</exception>
        </member>
        <member name="M:LongPath.LongPathFileInfo.MoveTo(System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="destFileName">The path to move the file to, which can specify a different file name.</param>
            <exception cref="T:System.IO.IOException">
            The destination file already exists.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="destFileName"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="destFileName"/> is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in sourceFileName or destFileName is invalid, (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="destFileName"/> is in an invalid format.</exception>
        </member>
        <member name="M:LongPath.LongPathFileInfo.Open(System.IO.FileMode)">
            <summary>
            Opens a file in the specified mode.
            </summary>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant specifying the mode (for example, <see cref="F:System.IO.FileMode.Open"/> or <see cref="F:System.IO.FileMode.Append"/>) in which to open the file.</param>
            <returns>A file opened in the specified mode, with read/write access and unshared.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception>
        </member>
        <member name="M:LongPath.LongPathFileInfo.Open(System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a file in the specified mode with read, write, or read/write access.
            </summary>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant specifying the mode (for example, <see cref="F:System.IO.FileMode.Open"/> or <see cref="F:System.IO.FileMode.Append"/>) in which to open the file.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> constant specifying whether to open the file with <see cref="F:System.IO.FileAccess.Read"/>, <see cref="F:System.IO.FileAccess.Write"/>, or <see cref="F:System.IO.FileAccess.ReadWrite"/> file access.</param>
            <returns>A FileStream object opened in the specified mode and access, and unshared.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception>
        </member>
        <member name="M:LongPath.LongPathFileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.
            </summary>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant specifying the mode (for example, <see cref="F:System.IO.FileMode.Open"/> or <see cref="F:System.IO.FileMode.Append"/>) in which to open the file.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> constant specifying whether to open the file with <see cref="F:System.IO.FileAccess.Read"/>, <see cref="F:System.IO.FileAccess.Write"/>, or <see cref="F:System.IO.FileAccess.ReadWrite"/> file access.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant specifying the type of access other <see cref="T:System.IO.FileStream"/> objects have to this file.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> object opened with the specified mode, access, and sharing options.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception>
        </member>
        <member name="M:LongPath.LongPathFileInfo.OpenRead">
            <summary>
            Creates a read-only <see cref="T:System.IO.FileStream"/>.
            </summary>
            <returns>A new read-only <see cref="T:System.IO.FileStream"/> object.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception>
        </member>
        <member name="M:LongPath.LongPathFileInfo.OpenText">
            <summary>
            Creates a <see cref="T:System.IO.StreamReader"/> with UTF8 encoding that reads from an existing text file.
            </summary>
            <returns>A new <see cref="T:System.IO.StreamReader"/> with UTF8 encoding.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception>
        </member>
        <member name="M:LongPath.LongPathFileInfo.OpenWrite">
            <summary>
            Creates a write-only <see cref="T:System.IO.FileStream"/>.
            </summary>
            <returns>A new write-only <see cref="T:System.IO.FileStream"/> object.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception>
        </member>
        <member name="M:LongPath.LongPathFileInfo.UpdateProperties">
            <summary>
            Updates the current class' properties.
            </summary>
        </member>
        <member name="T:LongPath.LongPathFileSystemInfo">
            <summary>
            Provides the base class for both <see cref="T:LongPath.LongPathFileInfo"/> and <see cref="T:LongPath.LongPathDirectoryInfo"/> objects.
            </summary>
            <remarks>
            This class is not thread-safe.
            </remarks>
        </member>
        <member name="F:LongPath.LongPathFileSystemInfo.isDirectory">
            <summary>
            Whether the current system entry is directory.
            </summary>
        </member>
        <member name="F:LongPath.LongPathFileSystemInfo.entryData">
            <summary>
            Current system entry data.
            </summary>
        </member>
        <member name="F:LongPath.LongPathFileSystemInfo.normalizedPath">
            <summary>
            Normalized path to the file or directory.
            </summary>
        </member>
        <member name="F:LongPath.LongPathFileSystemInfo.initialized">
            <summary>
            Whether the <see cref="F:LongPath.LongPathFileSystemInfo.entryData"/> was initialized.
            </summary>
        </member>
        <member name="M:LongPath.LongPathFileSystemInfo.#ctor(LongPath.Native.Win32FindData)">
            <summary>
            Initializes a new instance of the <see cref="T:LongPath.LongPathFileSystemInfo"/> class.
            </summary>
            <param name="data">File data.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:LongPath.LongPathFileSystemInfo.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LongPath.LongPathFileSystemInfo"/> class.
            </summary>
            <param name="path">The fully qualified name of the file or directory, or the relative file or directory name.</param>
            <param name="isDirectory">If set to <see langword="true"/>, the directory system information object will be retrieved.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:LongPath.LongPathFileSystemInfo.Attributes">
            <summary>
            Gets or sets the attributes for the current file or directory.
            </summary>
            <value>
            <see cref="T:System.IO.FileAttributes"/> of the current <see cref="T:LongPath.LongPathFileSystemInfo"/>.
            </value>
            <exception cref="T:System.IO.FileNotFoundException">The specified file does not exist.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">
            The caller attempts to set an invalid file attribute.
                <para>-or-</para>
            The user attempts to set an attribute value but does not have write permission.
            </exception>
            <exception cref="T:System.IO.IOException"><see cref="M:LongPath.LongPathFileSystemInfo.Refresh"/> cannot initialize the data.</exception>
        </member>
        <member name="P:LongPath.LongPathFileSystemInfo.CreationTime">
            <summary>
            Gets or sets the creation time of the current file or directory.
            </summary>
            <value>
            The creation date and time of the current <see cref="T:LongPath.LongPathFileSystemInfo"/> object.
            </value>
            <exception cref="T:System.IO.IOException"><see cref="M:LongPath.LongPathFileSystemInfo.Refresh"/> cannot initialize the data.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive.</exception>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid creation time.</exception>
        </member>
        <member name="P:LongPath.LongPathFileSystemInfo.CreationTimeUtc">
            <summary>
            Gets or sets the creation time, in coordinated universal time (UTC), of the current file or directory.
            </summary>
            <value>
            The creation date and time in UTC format of the current <see cref="T:LongPath.LongPathFileSystemInfo"/> object.
            </value>
            <exception cref="T:System.IO.IOException"><see cref="M:LongPath.LongPathFileSystemInfo.Refresh"/> cannot initialize the data.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive.</exception>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid creation time.</exception>
        </member>
        <member name="P:LongPath.LongPathFileSystemInfo.Exists">
            <summary>
            Gets a value indicating whether a file or directory exists.
            </summary>
            <value>
            <see langword="true"/> if the file or directory exists; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:LongPath.LongPathFileSystemInfo.LastAccessTime">
            <summary>
            Gets or sets the time the current file or directory was last accessed.
            </summary>
            <value>
            The time that the current file or directory was last accessed.
            </value>
            <exception cref="T:System.IO.IOException"><see cref="M:LongPath.LongPathFileSystemInfo.Refresh"/> cannot initialize the data.</exception>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid access time.</exception>
        </member>
        <member name="P:LongPath.LongPathFileSystemInfo.LastAccessTimeUtc">
            <summary>
            Gets or sets the time, in coordinated universal time (UTC), that the current file or directory was last accessed.
            </summary>
            <value>
            The UTC time that the current file or directory was last accessed.
            </value>
            <exception cref="T:System.IO.IOException"><see cref="M:LongPath.LongPathFileSystemInfo.Refresh"/> cannot initialize the data.</exception>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid access time.</exception>
        </member>
        <member name="P:LongPath.LongPathFileSystemInfo.LastWriteTime">
            <summary>
            Gets or sets the time when the current file or directory was last written to.
            </summary>
            <value>
            The time the current file was last written.
            </value>
            <exception cref="T:System.IO.IOException"><see cref="M:LongPath.LongPathFileSystemInfo.Refresh"/> cannot initialize the data.</exception>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid write time.</exception>
        </member>
        <member name="P:LongPath.LongPathFileSystemInfo.LastWriteTimeUtc">
            <summary>
            Gets or sets the time, in coordinated universal time (UTC), when the current file or directory was last written to.
            </summary>
            <value>
            The UTC time when the current file was last written to.
            </value>
            <exception cref="T:System.IO.IOException"><see cref="M:LongPath.LongPathFileSystemInfo.Refresh"/> cannot initialize the data.</exception>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid write time.</exception>
        </member>
        <member name="P:LongPath.LongPathFileSystemInfo.Name">
            <summary>
            Gets the name of the file or directory.
            </summary>
        </member>
        <member name="P:LongPath.LongPathFileSystemInfo.Extension">
            <summary>
            Gets the string representing the extension part of the file.
            </summary>
            <value>
            A string containing the <see cref="T:LongPath.LongPathFileSystemInfo"/> extension.
            </value>
        </member>
        <member name="P:LongPath.LongPathFileSystemInfo.FullName">
            <summary>
            Gets the full path of the directory or file.
            </summary>
            <value>
            A string containing the full path.
            </value>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="P:LongPath.LongPathFileSystemInfo.EntryData">
            <summary>
            Gets the current file system entry data.
            </summary>
        </member>
        <member name="P:LongPath.LongPathFileSystemInfo.NormalizedPath">
            <summary>
            Gets or sets the normalized path to the current file or directory.
            </summary>
        </member>
        <member name="P:LongPath.LongPathFileSystemInfo.OriginalPath">
            <summary>
            Gets the path originally specified by the user, whether relative or absolute.
            </summary>
        </member>
        <member name="M:LongPath.LongPathFileSystemInfo.Delete">
            <summary>
            Deletes a file or directory.
            </summary>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive.</exception>
            <exception cref="T:System.IO.IOException">There is an open handle on the file or directory, and the operating system is Windows XP or earlier.</exception>
        </member>
        <member name="M:LongPath.LongPathFileSystemInfo.Refresh">
            <summary>
            Refreshes the state of the object.
            </summary>
            <exception cref="T:System.IO.IOException">A device such as a disk drive is not ready.</exception>
        </member>
        <member name="M:LongPath.LongPathFileSystemInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:LongPath.LongPathFileSystemInfo.RefreshIfNeeded(System.Boolean)">
            <summary>
            Refreshes the state of the object, if needed.
            </summary>
            <param name="throwIfNotFound">Whether to throw an exception, if the target path cannot be found.</param>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive.</exception>
        </member>
        <member name="T:LongPath.Native.EFileAccess">
            <summary>
            A set of flags describing file access rights.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAccess.AccessSystemSecurity">
            <summary>
            Controls the ability to get or set the SACL in an object's security descriptor.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAccess.MaximumAllowed">
            <summary>
            Maximum allowed access mask.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAccess.Delete">
            <summary>
            The right to delete the object.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAccess.ReadControl">
            <summary>
            The right to read the information in the object's security descriptor, not including the information in the system access control list (SACL).
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAccess.WriteDac">
            <summary>
            The right to modify the discretionary access control list (DACL) in the object's security descriptor.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAccess.WriteOwner">
            <summary>
            The right to change the owner in the object's security descriptor.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAccess.Synchronize">
            <summary>
            The right to use the object for synchronization.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAccess.StandardRightsRequired">
            <summary>
            Combines <see cref="F:LongPath.Native.EFileAccess.Delete"/>, <see cref="F:LongPath.Native.EFileAccess.ReadControl"/>, <see cref="F:LongPath.Native.EFileAccess.WriteDac"/>, and <see cref="F:LongPath.Native.EFileAccess.WriteOwner"/> access.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAccess.StandardRightsRead">
            <summary>
            Currently defined to equal <see cref="F:LongPath.Native.EFileAccess.ReadControl"/>.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAccess.StandardRightsWrite">
            <summary>
            Currently defined to equal <see cref="F:LongPath.Native.EFileAccess.ReadControl"/>.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAccess.StandardRightsExecute">
            <summary>
            Currently defined to equal <see cref="F:LongPath.Native.EFileAccess.ReadControl"/>.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAccess.StandardRightsAll">
            <summary>
            Combines <see cref="F:LongPath.Native.EFileAccess.Delete"/>, <see cref="F:LongPath.Native.EFileAccess.ReadControl"/>, <see cref="F:LongPath.Native.EFileAccess.WriteDac"/>, <see cref="F:LongPath.Native.EFileAccess.WriteOwner"/>, and <see cref="F:LongPath.Native.EFileAccess.Synchronize"/> access.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAccess.SpecificRightsAll">
            <summary>
            Contains specific rights.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAccess.FileReadData">
            <summary>
            For a file object, the right to read the corresponding file data.
            For a directory object, the right to read the corresponding directory data.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAccess.FileListDirectory">
            <summary>
            For a directory, the right to list the contents of the directory.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAccess.FileWriteData">
            <summary>
            For a file object, the right to write data to the file.
            For a directory object, the right to create a file in the directory.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAccess.FileAddFile">
            <summary>
            For a directory, the right to create a file in the directory.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAccess.FileAppendData">
            <summary>
            For a file object, the right to append data to the file.
            For a directory object, the right to create a subdirectory.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAccess.FileAddSubdirectory">
            <summary>
            For a directory, the right to create a subdirectory.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAccess.FileCreatePipeInstance">
            <summary>
            For a named pipe, the right to create a pipe.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAccess.FileReadEa">
            <summary>
            The right to read extended file attributes.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAccess.FileWriteEa">
            <summary>
            The right to write extended file attributes.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAccess.FileExecute">
            <summary>
            The right to execute the file.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAccess.FileTraverse">
            <summary>
            For a directory, the right to traverse the directory.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAccess.FileDeleteChild">
            <summary>
            For a directory, the right to delete a directory and all the files it contains, including read-only files.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAccess.FileReadAttributes">
            <summary>
            The right to read file attributes.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAccess.FileWriteAttributes">
            <summary>
            The right to write file attributes.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAccess.GenericRead">
            <summary>
            Read access.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAccess.GenericWrite">
            <summary>
            Write access.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAccess.GenericExecute">
            <summary>
            Execute access.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAccess.GenericAll">
            <summary>
            All possible access rights.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAccess.FileAllAccess">
            <summary>
            All access rights.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAccess.FileGenericRead">
            <summary>
            Generic read access rights.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAccess.FileGenericWrite">
            <summary>
            Generic write access rights.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAccess.FileGenericExecute">
            <summary>
            Generic execution access rights.
            </summary>
        </member>
        <member name="T:LongPath.Native.EFileAttributes">
            <summary>
            A set of flags describing file or device attributes and flags.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAttributes.ReadOnly">
            <summary>
            A file that is read-only.
            Applications can read the file, but cannot write to it or delete it.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAttributes.Hidden">
            <summary>
            The file or directory is hidden.
            It is not included in an ordinary directory listing.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAttributes.System">
            <summary>
            A file or directory that the operating system uses a part of, or uses exclusively.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAttributes.Directory">
            <summary>
            The handle that identifies a directory.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAttributes.Archive">
            <summary>
            A file or directory that is an archive file or directory. 
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAttributes.Device">
            <summary>
            This value is reserved for system use.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAttributes.Normal">
            <summary>
            A file that does not have other attributes set.
            This attribute is valid only when used alone.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAttributes.Temporary">
            <summary>
            A file that is being used for temporary storage.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAttributes.SparseFile">
            <summary>
            A file that is a sparse file.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAttributes.ReparsePoint">
            <summary>
            A file or directory that has an associated reparse point, or a file that is a symbolic link.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAttributes.Compressed">
            <summary>
            A file or directory that is compressed.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAttributes.Offline">
            <summary>
            The data of a file is not available immediately.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAttributes.NotContentIndexed">
            <summary>
            The file or directory is not to be indexed by the content indexing service.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAttributes.Encrypted">
            <summary>
            A file or directory that is encrypted.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAttributes.WriteThrough">
            <summary>
            Write operations will not go through any intermediate cache, they will go directly to disk.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAttributes.Overlapped">
            <summary>
            The file or device is being opened or created for asynchronous I/O.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAttributes.NoBuffering">
            <summary>
            The file or device is being opened with no system caching for data reads and writes.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAttributes.RandomAccess">
            <summary>
            Access is intended to be random.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAttributes.SequentialScan">
            <summary>
            Access is intended to be sequential from beginning to end. 
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAttributes.DeleteOnClose">
            <summary>
            The file is to be deleted immediately after all of its handles are closed,
            which includes the specified handle and any other open or duplicated handles.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAttributes.BackupSemantics">
            <summary>
            The file is being opened or created for a backup or restore operation.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAttributes.PosixSemantics">
            <summary>
            Access will occur according to POSIX rules.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAttributes.OpenReparsePoint">
            <summary>
            Normal reparse point processing will not occur.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAttributes.OpenNoRecall">
            <summary>
            The file data is requested, but it should continue to be located in remote storage.
            </summary>
        </member>
        <member name="F:LongPath.Native.EFileAttributes.Invalid">
            <summary>
            Invalid file attributes.
            </summary>
        </member>
        <member name="T:LongPath.Native.Win32FindData">
            <summary>
            Contains information about the file that is found by the <c>FindFirstFile</c>, <c>FindFirstFileEx</c>, or <c>FindNextFile</c> function.
            </summary>
        </member>
        <member name="F:LongPath.Native.Win32FindData.FileAttributes">
            <summary>
            The file attributes of a file.
            </summary>
        </member>
        <member name="F:LongPath.Native.Win32FindData.CreationTime">
            <summary>
            A <c>FILETIME</c> structure that specifies when a file or directory was created.
            </summary>
        </member>
        <member name="F:LongPath.Native.Win32FindData.LastAccessTime">
            <summary>
            A <c>FILETIME</c> structure that specifies when a file or directory was previously accessed.
            </summary>
        </member>
        <member name="F:LongPath.Native.Win32FindData.LastWriteTime">
            <summary>
            A <c>FILETIME</c> structure that specifies when a file or directory was previously written.
            </summary>
        </member>
        <member name="F:LongPath.Native.Win32FindData.FileSizeHigh">
            <summary>
            The high-order <c>DWORD</c> value of the file size, in bytes.
            </summary>
        </member>
        <member name="F:LongPath.Native.Win32FindData.FileSizeLow">
            <summary>
            The low-order <c>DWORD</c> value of the file size, in bytes.
            </summary>
        </member>
        <member name="F:LongPath.Native.Win32FindData.Reserved0">
            <summary>
            This value is undefined and should not be used.
            </summary>
        </member>
        <member name="F:LongPath.Native.Win32FindData.Reserved1">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:LongPath.Native.Win32FindData.FileName">
            <summary>
            The name of the file.
            </summary>
        </member>
        <member name="F:LongPath.Native.Win32FindData.Alternate">
            <summary>
            An alternative name for the file.
            </summary>
        </member>
        <member name="T:LongPath.Native.NativeMethods">
            <summary>
            Contains P/Invoke method prototypes.
            </summary>
            <remarks>
            List of Win32 error codes:
            <c>http://msdn.microsoft.com/en-us/library/cc231199(v=prot.20).aspx</c>
            </remarks>
        </member>
        <member name="F:LongPath.Native.NativeMethods.MaxPath">
            <summary>
            Maximum path length.
            </summary>
        </member>
        <member name="F:LongPath.Native.NativeMethods.MaxLongPath">
            <summary>
            While Windows allows larger paths up to a maximum of <c>32767</c> characters, because this is only an approximation and
            can vary across systems and OS versions, we choose a limit well under so that we can give a consistent behavior.
            </summary>
        </member>
        <member name="F:LongPath.Native.NativeMethods.MaxAlternate">
            <summary>
            Maximum alternate path length.
            </summary>
        </member>
        <member name="F:LongPath.Native.NativeMethods.Ok">
            <summary>
            Windows return code for successful operations.
            </summary>
        </member>
        <member name="F:LongPath.Native.NativeMethods.ErrorFileNotFound">
            <summary>
            The system cannot find the file specified.
            </summary>
        </member>
        <member name="F:LongPath.Native.NativeMethods.ErrorPathNotFound">
            <summary>
            The system cannot find the path specified.
            </summary>
        </member>
        <member name="F:LongPath.Native.NativeMethods.ErrorAccessDenied">
            <summary>
            Access is denied.
            </summary>
        </member>
        <member name="F:LongPath.Native.NativeMethods.ErrorInvalidDrive">
            <summary>
            The system cannot find the drive specified.
            </summary>
        </member>
        <member name="F:LongPath.Native.NativeMethods.ErrorNoMoreFiles">
            <summary>
            There are no more files.
            </summary>
        </member>
        <member name="F:LongPath.Native.NativeMethods.ErrorInvalidName">
            <summary>
            The file name, directory name, or volume label syntax is incorrect.
            </summary>
        </member>
        <member name="F:LongPath.Native.NativeMethods.ErrorAlreadyExists">
            <summary>
            Cannot create a file when that file already exists.
            </summary>
        </member>
        <member name="F:LongPath.Native.NativeMethods.ErrorFilenameExcedRange">
            <summary>
            The file name or extension is too long.
            </summary>
        </member>
        <member name="F:LongPath.Native.NativeMethods.ErrorOperationAborted">
            <summary>
            The I/O operation has been aborted because of either a thread exit or an application request.
            </summary>
        </member>
        <member name="F:LongPath.Native.NativeMethods.ErrorDirNotEmpty">
            <summary>
            The directory is not empty.
            </summary>
        </member>
        <member name="F:LongPath.Native.NativeMethods.ErrorFileExists">
            <summary>
            The file exists.
            </summary>
        </member>
        <member name="M:LongPath.Native.NativeMethods.SetFileTime(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Int64@,System.Int64@,System.Int64@)">
            <summary>
            Sets the date and time that the specified file or directory was created, last accessed, or last modified.
            </summary>
            <param name="fileHandle">A handle to the file or directory.</param>
            <param name="creationTime">New creation date and time for the file or directory.</param>
            <param name="lastAccessTime">New last access date and time for the file or directory.</param>
            <param name="lastWriteTime">New last modified date and time for the file or directory.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:LongPath.Native.NativeMethods.GetFileAttributes(System.String)">
            <summary>
            Retrieves file system attributes for a specified file or directory.
            </summary>
            <param name="fileName">The name of the file or directory.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:LongPath.Native.NativeMethods.SetFileAttributes(System.String,LongPath.Native.EFileAttributes)">
            <summary>
            Sets the attributes for a file or directory.
            </summary>
            <param name="fileName">The name of the file whose attributes are to be set.</param>
            <param name="fileAttributes">The file attributes to set for the file.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:LongPath.Native.NativeMethods.FindFirstFile(System.String,LongPath.Native.Win32FindData@)">
            <summary>
            Searches a directory for a file or subdirectory with a name that matches a specific name (or partial name if wildcards are used).
            </summary>
            <param name="fileName">The directory or path, and the file name, which can include wildcard characters.</param>
            <param name="findFileData">The <see cref="T:LongPath.Native.Win32FindData"/> structure that receives information about a found file or directory.</param>
            <returns>If the function succeeds, the return value is a search handle used in a subsequent call to <see cref="M:LongPath.Native.NativeMethods.FindNextFile(LongPath.Native.SafeFindHandle,LongPath.Native.Win32FindData@)"/> or <see cref="M:LongPath.Native.NativeMethods.FindClose(System.IntPtr)"/>.</returns>
        </member>
        <member name="M:LongPath.Native.NativeMethods.FindNextFile(LongPath.Native.SafeFindHandle,LongPath.Native.Win32FindData@)">
            <summary>
            Continues a file search from a previous call to the <see cref="M:LongPath.Native.NativeMethods.FindFirstFile(System.String,LongPath.Native.Win32FindData@)"/>.
            </summary>
            <param name="findFile">The search handle returned by a previous call to the <see cref="M:LongPath.Native.NativeMethods.FindFirstFile(System.String,LongPath.Native.Win32FindData@)"/> function.</param>
            <param name="findFileData">The <see cref="T:LongPath.Native.Win32FindData"/> structure that receives information about a found file or directory.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:LongPath.Native.NativeMethods.FindClose(System.IntPtr)">
            <summary>
            Closes a file search handle opened by the <see cref="M:LongPath.Native.NativeMethods.FindFirstFile(System.String,LongPath.Native.Win32FindData@)"/> or <see cref="M:LongPath.Native.NativeMethods.FindNextFile(LongPath.Native.SafeFindHandle,LongPath.Native.Win32FindData@)"/>.
            </summary>
            <param name="findFile">The file search handle.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:LongPath.Native.NativeMethods.CreateFile(System.String,LongPath.Native.EFileAccess,System.IO.FileShare,System.IntPtr,System.IO.FileMode,LongPath.Native.EFileAttributes,System.IntPtr)">
            <summary>
            Creates or opens a file or I/O device.
            </summary>
            <param name="fileName">The name of the file or device to be created or opened.</param>
            <param name="desiredAccess">The requested access to the file or device, which can be summarized as read, write, both or neither zero.</param>
            <param name="shareMode">The requested sharing mode of the file or device, which can be read, write, both, delete, all of these, or none.</param>
            <param name="securityAttributes">A pointer to a <c>SECURITY_ATTRIBUTES</c> structure.</param>
            <param name="createMode">An action to take on a file or device that exists or does not exist.</param>
            <param name="flagsAndAttributes">The file or device attributes and flags.</param>
            <param name="templateFile">A valid handle to a template file with the <c>GENERIC_READ</c> access right.</param>
            <returns>If the function succeeds, the return value is an open handle to the specified file, device, named pipe, or mail slot.</returns>
        </member>
        <member name="M:LongPath.Native.NativeMethods.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file.
            </summary>
            <param name="existingFileName">The name of an existing file.</param>
            <param name="newFileName">The name of the new file.</param>
            <param name="failIfExists">
            If this parameter is <see langword="true"/> and the new file specified by <paramref name="newFileName"/> already exists,
            the function fails.<br/>
            If this parameter is <see langword="false"/> and the new file already exists, the function overwrites the existing file and succeeds.
            </param>
            <returns>If the function succeeds, the return value is <see langword="true"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:LongPath.Native.NativeMethods.MoveFile(System.String,System.String)">
            <summary>
            Moves an existing file or a directory, including its children.
            </summary>
            <param name="pathNameFrom">The current name of the file or directory on the local computer.</param>
            <param name="pathNameTo">The new name for the file or directory.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:LongPath.Native.NativeMethods.DeleteFile(System.String)">
            <summary>
            Deletes an existing file.
            </summary>
            <param name="fileName">The name of the file to be deleted.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:LongPath.Native.NativeMethods.CreateDirectory(System.String,System.IntPtr)">
            <summary>
            Creates a new directory.
            </summary>
            <param name="pathName">The path of the directory to be created.</param>
            <param name="securityAttributes">A pointer to a <c>SECURITY_ATTRIBUTES</c> structure.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:LongPath.Native.NativeMethods.RemoveDirectory(System.String)">
            <summary>
            Deletes an existing empty directory.
            </summary>
            <param name="pathName">The path of the directory to be removed.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:LongPath.Native.NativeMethods.GetFullPathName(System.String,System.UInt32,System.Text.StringBuilder,System.IntPtr)">
            <summary>
            Retrieves the full path and file name of the specified file.
            </summary>
            <param name="fileName">The name of the file.</param>
            <param name="bufferLength">The size of the <paramref name="buffer"/> to receive the null-terminated string for the drive and path.</param>
            <param name="buffer">A buffer that receives the null-terminated string for the drive and path.</param>
            <param name="filePart">A pointer to a buffer that receives the address (within <paramref name="buffer"/>) of the final file name component in the path.</param>
            <returns>If the function succeeds, the return value is the length, in <c>TCHARs</c>, of the string copied to <paramref name="buffer"/>, not including the terminating null character.</returns>
        </member>
        <member name="T:LongPath.Native.SafeFindHandle">
            <summary>
            Represents a wrapper class for a find handle used by the <see cref="M:LongPath.Native.NativeMethods.FindFirstFile(System.String,LongPath.Native.Win32FindData@)"/> and <see cref="M:LongPath.Native.NativeMethods.FindNextFile(LongPath.Native.SafeFindHandle,LongPath.Native.Win32FindData@)"/> functions.
            </summary>
        </member>
        <member name="M:LongPath.Native.SafeFindHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LongPath.Native.SafeFindHandle"/> class.
            </summary>
        </member>
        <member name="M:LongPath.Native.SafeFindHandle.ReleaseHandle">
            <summary>
            When overridden in a derived class, executes the code required to free the handle.
            </summary>
            <returns>
            <see langword="true"/> if the handle is released successfully; otherwise, in the event of a catastrophic failure, <see langword="false"/>.
            In this case, it generates a <c>releaseHandleFailed</c> MDA Managed Debugging Assistant.
            </returns>
        </member>
    </members>
</doc>
